# Stage 1: Build environment
FROM node:18-slim AS builder

WORKDIR /usr/src/app

# Copy package.json and lock file
COPY package*.json ./

# Install ALL dependencies (including devDependencies needed for build)
RUN npm ci

# Copy the rest of the application source code
COPY . .

# Check for utils.ts file before building
RUN ls -la server/ && \
    # Verify utils.ts is present
    if [ ! -f server/utils.ts ]; then \
      echo "Error: utils.ts file is missing, creating a minimal version" && \
      echo 'export function log(message: string, source = "server") { console.log(`[${source}] ${message}`); }' > server/utils.ts; \
    fi

# Run the build command (vite should be available now)
# This assumes the build process outputs to a 'dist' directory
RUN npm run build

# Stage 2: Production environment
FROM node:18-slim

WORKDIR /usr/src/app

# Copy package.json and lock file again for installing only prod deps
COPY package*.json ./

# Install all dependencies including vite
RUN npm ci

# Copy built artifacts from the builder stage
# Assumes build output is in /usr/src/app/dist in the builder stage
COPY --from=builder /usr/src/app/dist ./dist

# Copy source files since they're needed even in production
COPY --from=builder /usr/src/app/server ./server
COPY --from=builder /usr/src/app/client ./client
COPY --from=builder /usr/src/app/shared ./shared
COPY --from=builder /usr/src/app/vite.config.ts ./vite.config.ts
COPY --from=builder /usr/src/app/tsconfig.json ./tsconfig.json

# We're essentially copying the full source with the addition of the dist directory
# This ensures all imports work correctly in production

# Expose the port the app runs on
EXPOSE 8080

# Define environment variables
ENV NODE_ENV=production
ENV HOST=0.0.0.0
# PORT is set automatically by Cloud Run

# Define the command to run the application
# CORRECTED PATH: Point to the likely output of esbuild
CMD ["node", "dist/index.js"]
